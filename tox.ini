# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint-mock, lint, unit, static, coverage-report, coverage-xml

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
lib_path = {toxinidir}/lib/charms/velero_libs
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:format]
allowlist_externals = tox
description = Apply coding style standards to code
deps =
    ruff
commands =
    ruff format {[vars]all_path}
    ruff check --fix {[vars]all_path}

[testenv:lint-mock]
description = Provide mock lint commands to use ruff instead
commands =
    python -c "'pydocstyle'"
    python -c "'codespell'"
    python -c "'flake8'"
    python -c "'black'"
    python -c "'isort'"
    python -c "'pylint'"
    python -c "'flake8-docstrings'"
    python -c "'flake8-docstrings-complete'"
    python -c "'flake8-builtins'"
    python -c "'flake8-test-docs'"
    python -c "'pep8-naming'"

[testenv:lint]
description = Check code against coding style standards
setenv =
  PYTHONPATH = {envdir}{:}{[vars]lib_path}
deps =
    mypy
    ruff
    pydantic[mypy]
    types-PyYAML
commands =
    ruff format --check {[vars]all_path}
    ruff check {[vars]all_path}
    mypy {[vars]all_path}

[testenv:unit]
runner = uv-venv-lock-runner
description = Run unit tests
dependency_groups = unit
commands =
    uv run coverage run --source={[vars]src_path} \
        -m pytest --ignore={[vars]tst_path}integration -vv \
        --basetemp={envtmpdir} \
        --tb native -s {posargs}
    uv run coverage report --show-missing

[testenv:coverage-report]
description = Create test coverage report
deps =
    coverage[toml]
commands =
    coverage report

[testenv:coverage-xml]
description = Create test coverage XML report
deps =
    coverage[xml]
commands =
    coverage xml

[testenv:static]
description = Run static analysis tests
deps =
    bandit[toml]
commands =
    bandit -c {toxinidir}/pyproject.toml -r {[vars]all_path}

[testenv:integration]
runner = uv-venv-lock-runner
description = Run integration tests
dependency_groups = integration
commands =
    pytest -v --tb native \
      -s {toxinidir}/tests/integration \
      --log-cli-level INFO \
      --log-format "%(asctime)s %(levelname)s %(message)s" \
      --log-date-format "%Y-%m-%d %H:%M:%S" \
      --exitfirst \
      {posargs}
